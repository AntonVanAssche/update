#!/bin/bash

#Color Variables

NC='\e[0m'
BLACK='\e[0;30m'
RED='\e[0;31m'
GREEN='\e[0;32m'
WHITE='\e[1;37m'
ORANGE='\e[0;33m'
BLUE='\e[0;34m'
PURPLE='\e[0;35m'
CYAN='\e[0;36m'
YELLOW='\e[1;33m'
DARGRAY='\e[1;30m'

#Lighter Colors
LIGRAY='\e[0;37m'
LIGREEN='\e[1;32m'
LIRED='\e[1;31m'
LIBLUE='\e[1;34m'
LIPURPLE='\e[1;35m'
LICYAN='\e[1;36m'

#Background Color Variables

BACKBLACK='\e[0;40m'
BACKRED='\e[0;41m'
BACKGREEN='\e[0;42m'
BACKWHITE='\e[1;47m'
BACKORANGE='\e[0;43m'
BACKBLUE='\e[0;44m'
BACKPURPLE='\e[0;45m'
BACKCYAN='\e[0;46m'
BACKYELLOW='\e[1;43m'

#Lighter Colors
BACKLIGRAY='\e[0;47m'
BACKLIGREEN='\e[1;42m'
BACKLIRED='\e[1;41m'
BACKLIBLUE='\e[1;44m'
BACKLIPURPLE='\e[1;45m'
BACKLICYAN='\e[1;46m'

#Markup Variables
UNDERLINE='\e[4m'
BOLD='\e[1m'
BLINK='\e[5m'
REVVID='\e[7m'

# Code

if [ "$(whoami)" == "root" ]; then
  sudo=""
else
  sudo="sudo"
fi

if [[ ! "$SHELL" =~ "bash" ]]; then
  echo -e "${YELLOW}You aren't using bash... This install script (and ${LICYAN}update${YELLOW}) is written in bash, so you might have some problems.${NC}"
fi

case $(uname) in
Linux)
  if [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "debian" ]] || [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "Debian" ]] || [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "ubuntu" ]] || [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "Ubuntu" ]] || [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "raspbian" ]] || [[ "$(cat /etc/*-release || cat /etc/issue || lsb_release -a)" =~ "Raspbian" ]] || command -v apt-get &>/dev/null || command -v apt &>/dev/null; then
    distro="debian"
  elif [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "fedora" ]] || [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "Fedora" ]] || [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "CentOS" ]] || [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "centos" ]] || [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "Red Hat" ]] || [[ "$(cat /etc/*-release || cat /etc/redhat-release || cat /etc/issue || lsb_release -a)" =~ "red hat" ]] || command -v dnf &>/dev/null; then
    distro="fedora"
  elif [[ "$(cat /etc/*-release || lsb_release -a || cat /etc/issue)" =~ "Arch" ]] || [[ "$(cat /etc/*-release || lsb_release -a || cat /etc/issue)" =~ "arch" ]] || [[ "$(cat /etc/*-release || lsb_release -a || cat /etc/issue)" =~ "Manjaro" ]] || [[ "$(cat /etc/*-release || lsb_release -a || cat /etc/issue)" =~ "manjaro" ]] || command -v pacman &>/dev/null; then
    distro="arch"
  fi

  case $distro in
  "debian")
    rm -f update*.deb
    printf "\n${WHITE}Downloading ${CYAN}${BOLD}update${NC}${WHITE}...${NC}\n\n"
    LATEST=$(curl -s https://api.github.com/repos/Crilum/update/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    curl -s https://api.github.com/repos/Crilum/update/releases/latest |
      grep browser_download_url |
      grep 'all.deb"' |
      cut -d '"' -f 4 |
      xargs -n 1 curl -L -s -o update_${LATEST}_all.deb
    if command -v update &>/dev/null; then
      printf "\n${WHITE}Uninstalling update...${NC}"
      $sudo apt remove -y update
      printf "\n${GREEN}Done!${NC}"
    fi
    printf "\n${WHITE}Installing update...${NC}"
    $sudo apt install -yf ./update_${LATEST}_all.deb
    printf "\n${GREEN}Done!${NC}"
    rm update_${LATEST}_all.deb
    ;;
  "fedora")
    printf "\n${WHITE}Installing dependencies with dnf...${NC}\n\n"
    sudo dnf install -y curl wget bash alien
    rm -f update*.rpm
    printf "\n${WHITE}Downloading ${CYAN}${BOLD}update${NC}${WHITE}...${NC}\n\n"
    LATEST=$(curl -s https://api.github.com/repos/Crilum/update/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    curl -s https://api.github.com/repos/Crilum/update/releases/latest |
      grep browser_download_url |
      grep 'noarch.rpm"' |
      cut -d '"' -f 4 |
      xargs -n 1 curl -L -s -o update.${LATEST}-2.noarch.rpm
    if command -v update &>/dev/null; then
      printf "\n${WHITE}Uninstalling update...${NC}"
      $sudo dpkg remove -y update
      printf "\n${GREEN}Done!${NC}"
    fi
    printf "\n${WHITE}Installing update...${NC}"
    $sudo alien -i --scripts ./update.${LATEST}-2.noarch.rpm
    printf "\n${GREEN}Done!${NC}\n"
    rm update.${LATEST}-2.noarch.rpm
    ;;
  *)
    if ! command -v curl &>/dev/null || ! command -v chmod &>/dev/null || ! command -v wget &>/dev/null || ! command -v git &>/dev/null; then
      echo -e "${LIRED}Error: Missing dependencies! Please install \`curl\`, \`wget\`, \`git\`, and of course, \`bash\` (If you got this far, you should already have it installed).${NC}"
      exit 1
    fi
    LATEST=$(curl -s https://api.github.com/repos/Crilum/update/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    printf "\n${WHITE}Downloading ${CYAN}${BOLD}update${NC}${WHITE}...${NC}\n\n"
    cd /tmp/
    git clone https://github.com/Crilum/update -b $LATEST
    cd /tmp/update
    $sudo cp -f update /usr/local/bin/
    $sudo ln -sf /usr/local/bin/update /usr/local/bin/up
    $sudo chmod +x /usr/local/bin/update /usr/local/bin/up
    ;;
  esac
  ;;
Darwin)
  if ! command -v curl &>/dev/null || ! command -v chmod &>/dev/null || ! command -v wget &>/dev/null || ! command -v git &>/dev/null; then
    if ! command -v homebrew &>/dev/null; then
      printf "\n${WHITE}Update needs some dependencies (curl, chmod, git, and wget). Do you want to install Homebrew (for installing dependencies)? [Y/n] ${LIBLUE}"
      read instHomebrew
      if [[ $instHomebrew =~ "yYYesyesYES" ]]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      else
        printf "\n${RED}User error: user chose not to install Homebrew!"
        exit 1
      fi
    fi
    printf "\n${WHITE}Installing dependencies with Homebrew...${NC}\n\n"
    brew install curl chmod wget git
  fi
  LATEST=$(curl -s https://api.github.com/repos/Crilum/update/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
  printf "\n${WHITE}Downloading ${CYAN}${BOLD}update${NC}${WHITE}...${NC}\n\n"
  cd /tmp/
  git clone https://github.com/Crilum/update -b $LATEST
  cd /tmp/update
  $sudo cp update /usr/local/bin/
  $sudo ln -s /usr/local/bin/update /usr/local/bin/up
  $sudo chmod +x /usr/local/bin/update /usr/local/bin/up
  ;;
*)
  echo "${LIRED}Error: you are not running a suppoted system (supported systems are: Linux or MacOS)! If you are, please file a bug report at https://github.com/Crilum/update/issues/new.${NC}"
  exit 1
  ;;
esac

printf "${GREEN}All finished installing!\n${WHITE}Try \'${CYAN}${BOLD}update ${YELLOW}help${WHITE}\' (or, \'${LICYAN}up${NC} ${YELLOW}help${WHITE}\') to learn how to use ${CYAN}${BOLD}update${WHITE}!${NC}\n"
