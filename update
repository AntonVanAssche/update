#!/bin/bash

version="v1.3.3"

#Color Variables

NC='\e[0m'
BLACK='\e[0;30m'
RED='\e[0;31m'
GREEN='\e[0;32m'
WHITE='\e[1;37m'
ORANGE='\e[0;33m'
BLUE='\e[0;34m'
PURPLE='\e[0;35m'
CYAN='\e[0;36m'
YELLOW='\e[1;33m'
DARGRAY='\e[1;30m'

#Lighter Colors
LIGRAY='\e[0;37m'
LIGREEN='\e[1;32m'
LIRED='\e[1;31m'
LIBLUE='\e[1;34m'
LIPURPLE='\e[1;35m'
LICYAN='\e[1;36m'

#Background Color Variables

BACKBLACK='\e[0;40m'
BACKRED='\e[0;41m'
BACKGREEN='\e[0;42m'
BACKWHITE='\e[1;47m'
BACKORANGE='\e[0;43m'
BACKBLUE='\e[0;44m'
BACKPURPLE='\e[0;45m'
BACKCYAN='\e[0;46m'
BACKYELLOW='\e[1;43m'

#Lighter Colors
BACKLIGRAY='\e[0;47m'
BACKLIGREEN='\e[1;42m'
BACKLIRED='\e[1;41m'
BACKLIBLUE='\e[1;44m'
BACKLIPURPLE='\e[1;45m'
BACKLICYAN='\e[1;46m'

#Markup Variables
UNDERLINE='\e[4m'
DOUBLEUNDERLINE='\e[21m'
BOLD='\e[1m'
BLINK='\e[5m'
REVVID='\e[7m'

pkgs="$*"
if [[ "$pkgs" =~ "--no-grep-args" ]]; then
    pkgs="$(echo $pkgs | sed -e 's/--no-grep-args//g' -e 's/--all//g' -e 's/-a//g' -e 's/--apt//g' -e 's/-A//g' -e 's/all//g' -e 's/--npm//g' -e 's/-n//g' -e 's/snaps//g' -e 's/-s//g' -e 's/--snaps//g' -e 's/-f//g' -e 's/--flatpak//g' -e 's/-d//g' -e 's/--dnf//g')"
else
    pkgs="$(echo $pkgs | sed -e 's/--no-grep-args//g' -e 's/--all//g' -e 's/-a//g' -e 's/--apt//g' -e 's/apt//g' -e 's/-A//g' -e 's/all//g' -e 's/npm//g' -e 's/--npm//g' -e 's/-n//g' -e 's/snaps//g' -e 's/-s//g' -e 's/--snaps//g' -e 's/flatpak//g' -e 's/-f//g' -e 's/--flatpak//g' -e 's/dnf//g' -e 's/-d//g' -e 's/--dnf//g')"
fi
# Functions

function error() {
    if [ "$*" == "-n" ] || [ "$*" == "--no-exit" ]; then
        printf "\n${RED}${BOLD}Error: $1${NC}\n"
    else
        printf "\n${RED}${BOLD}Error: $1${NC}\n"
        exit 1
    fi
}

function warning() {
    printf "\nWarning: ${YELLOW}$1${NC}\n"
}

function status() {
    if [ "$1" == "-g" ] || [ "$1" == "--green" ]; then
        printf "\n${GREEN}$2${NC}\n"
    elif [ "$1" == "-c" ] || [ "$1" == "--cyan" ]; then
        printf "\n${CYAN}$2${NC}\n"
    elif [ "$1" == "-C" ] || [ "$1" == "--cyan-bold" ]; then
        printf "\n${LICYAN}$2${NC}\n"
    else
        printf "\n${WHITE}$1${NC}\n"
    fi
}

function internet_check() {
    if ! wget --spider "https://github.com" &>/dev/null; then
        error "I tried to contact ${BLUE}${BOLD}https://github.com${RED} but it did not respond! Check your internet connection!"
    fi
}

function upd_pi_apps() {
    status 'Pi-Apps output:'

    if [ "$(whoami)" = "root" ]; then
        echo -e "\n\e[1;31mError: you can't update Pi-Apps as root! Please try again as normal user.\e[0m"
        return 1
    fi

    if [ ! -d $HOME/pi-apps ]; then
        if [[ $(cat /proc/cpuinfo | grep "Raspberry Pi") =~ "Raspberry Pi" ]]; then
            warning 'No Pi-Apps directory found! Do you want to install Pi-Apps? Timeout in 15 seconds... [y/n] '
            read -t 15 input
            case $input in
            y | Y | yes | Yes | YES) wget -qO- https://raw.githubusercontent.com/Botspot/pi-apps/master/install | bash || error '\nI was not able to download and run the Pi-Apps install script. Make sure you have wget installed, and an internet connection.' ;;
            *) status 'Ok, I will not install Pi-Apps.' || exit 0 ;;
            esac
        elif [[ ! $(cat /proc/cpuinfo | grep "Raspberry Pi") =~ "Raspberry Pi" ]] || [[ ! $(arch) =~ "arm" ]] && [[ ! $(arch) =~ "aarch" ]] && [[ ! "$(uname)" == "Darwin" ]]; then
            if [ "$1" == "all" ]; then
            warning "I didn't find Pi-Apps, and you are not using a Raspberry Pi, or an ARM computer (your architecture is $(arch)), so I won't ask to install Pi-Apps."
            else
            error "I didn't find Pi-Apps, and you are not using a Raspberry Pi, or an ARM computer (your architecture is $(arch)), so I won't ask to install Pi-Apps."
            fi
        fi
    elif [ ! -e $HOME/pi-apps/updater ]; then
        error 'I couldn'\''t find the pi-apps updater script.. Something is wrong!\n'
    fi

    $HOME/pi-apps/updater cli-yes
    status "Setting status..."
    $HOME/pi-apps/updater set-status &>/dev/null
    status -g "Done!"
}

function upd_snaps() {

    if ! command -v snap &>/dev/null; then
        status "I couldn't find snapd on your system, so I'm not using it."
        return
    fi
    if [ "$1" == "all" ]; then
        status 'Checking for snap updates. Please Wait...\n'
        $sudo snap refresh || warning 'I failed to run '\''snap refresh'\''! snap has probably output an error above.'
    else
        internet_check
        if [ "$pkgs" != "" ]; then
            errMsg="I wasn't able to refresh: $pkgs!"
        else
            errMsg="I wasn't able to refresh snap containers!"
        fi
        status 'Checking for snap updates. Please Wait...\n'
        $sudo snap refresh $pkgs || error "$errMsg"
    fi
}

function upd_upd_script() {
    internet_check
    if [ "$1" != "on-start" ]; then
        status 'Checking for an update...'
    fi
    latestRelease="$(curl --silent https://api.github.com/repos/Crilum/update/releases/latest | grep "tag_name" | sed -e 's/"//g' -e 's/://g' -e 's/,//g' -e 's/tag_name//g' -e 's/ //g' -e 's/v//')"
    versionNoV="$(echo $version | sed -e 's/v//')"
    updateAvailable="no"
    if [ "$latestRelease" \> "$versionNoV" ]; then
        if [ "$1" == "on-start" ]; then
            status -C "There's an update available! ${WHITE}Run ${LICYAN}update ${YELLOW}-u${WHITE} to intall it."
            updateAvailable="yes"
        else
            status -C "There's an update available! Do you want to install it? [Y/n] "
            read confInstallUpdate
            updateAvailable="yes"
            case $confInstallUpdate in
            y | Y | yes | YES | Yes | "")
                    curl --silent "https://raw.githubusercontent.com/Crilum/update/main/install" | bash || error 'I couldn'\''t update ${CYAN}${BOLD}update${RED}! Please make sure you have curl installed!'
                    updateAvailable="no"
                ;;
            *)
                status "Ok, I won't install the update."
                exit 0
                ;;
            esac
        fi
    elif [ "$latestRelease" \< "$versionNoV" ]; then
        if [ "$1" != "on-start" ]; then
            status "Looks like you're developing an update, and haven't released it yet. Cool!\n(Or your version got messed up somehow...)"
            updateAvailable="no"
        fi
        updateAvailable="no"
    elif [ "$latestRelease" == "$versionNoV" ]; then
        if [ "$1" == "on-start" ]; then
            updateAvailable="no"
            return
        else
            status -g "No updates available. You're good to go!"
        fi

    fi
}

function upd_flatpak() {
    if ! command -v flatpak &>/dev/null; then
        status "I couldn't find Flatpak on your system, so I'm not using it."
        return
    fi
    if [ "$1" == "all" ]; then
        status '\nFlatpak output:\n'
        flatpak update || warning 'I couldn'\''t update flatpak apps! flatpak will probably have an error above.'
    else
        if [ "$pkgs" != "" ]; then
            errMsg="I wasn't able to upgrade: $pkgs!"
        else
            errMsg="I wasn't able to upgrade Flatpak apps!"
        fi
        status '\nFlatpak output:\n'
        flatpak update $pkgs || error "$errMsg"
    fi
}

function upd_pacman() {
    if ! command -v pacman &>/dev/null; then
        status "I couldn't find pacman, so I'm assuming you're not running Arch or a derivative of it. Not using pacman."
        return
    fi
    if [ "$1" == "all" ]; then
        status 'pacman output:\n'
        $sudo pacman -Syu || warning "I couldn't update pacman packages!"
    else
        status 'pacman output:\n'
        $sudo pacman -Syu || error "I couldn't update pacman packages!"
    fi
}

function upd_apt() {
    if ! command -v apt &>/dev/null; then
        status "I couldn't find apt, so I'm assuming you're not running Debian or a derivative of it. Not using apt."
        return
    fi
    if [ "$1" == "all" ]; then
        status '\nApt output:\n'
        $sudo apt update
        $sudo apt -y upgrade
        $sudo apt -y autoremove
    else
        if [ "$pkgs" != "" ]; then
            errMsg="I wasn't able to upgrade: $pkgs!"
        else
            errMsg="I wasn't able to upgrade apt packages!"
        fi
        internet_check
        status '\nApt output:\n'
        $sudo apt update || error "Failed to run 'apt update'!"
        $sudo apt -y upgrade $pkgs || error "$errMsg"
        $sudo apt -y autoremove
    fi
}

function upd_homebrew() {
    if ! brew help &>/dev/null; then
        status "I couldn't find Homebrew on your system, so I'm not using it."
        return
    fi
    if [ "$1" == "all" ]; then
        printf "\n${WHITE}Homebrew output:${NC}\n"
        brew update || warning "Homebrew failed to update its formulae!"
        brew upgrade || warning "Homebrew failed to upgrade its casks and formulae!"
    else
        internet_check
        printf "\n${WHITE}Homebrew output:${NC}\n"
        brew update || error "Homebrew failed to update its formulae!"
        brew upgrade || error "Homebrew failed to upgrade its casks and formulae!"
    fi
}

function upd_npm() {
    if ! command -v npm &>/dev/null; then
        status "I couldn't find NPM on your system, so I'm not using it."
        return
    fi
    if [ "$1" == "all" ]; then
        warning 'Updating npm dependencies should only be done if you know what you'\''re doing. Do you want to continue? Timeout in 10 seconds... [y/N] '
        read -t 10 input
        case $input in
        y | Y | Yes | yes | YES | "")
            printf "\n${WHITE}npm output:${NC}\n"
            npm update
            ;;
        n | N | No | no | NO | *) status -C "Ok, I won't update npm." ;;
        esac
    else
        warning 'Updating npm dependencies should only be done if you know what you'\''re doing. Do you want to continue? [y/N] '
        read input
        case $input in
        y | Y | Yes | yes | YES | "")
            printf "\n${WHITE}npm output:${NC}\n"
            npm update $pkgs
            ;;
        n | N | No | no | NO | *) status -C "Ok, I won't update npm." ;;
        esac
    fi
}

function upd_dnf() {
    if ! command -v dnf &>/dev/null; then
        status "I couldn't find dnf, so I'm assuming you're not running Fedora or a derivative of it. Not using dnf."
        return
    fi
    if [ "$1" == "all" ]; then
        $sudo dnf upgrade $pkgs
    else
        internet_check
        $sudo dnf upgrade $pkgs
    fi
}
function upd_all() {
    internet_check
    upd_apt all
    upd_homebrew all
    upd_pacman all
    upd_dnf all
    # Updating with npm is disabled by default. Uncomment the next line to enable it.
    #npm update all
    upd_flatpak all
    upd_snaps all
    upd_pi_apps all
}

function help() {

    echo -e "\n${LICYAN}update ${WHITE}version ${YELLOW}${version} ${WHITE}| created by ${LIBLUE}Crilum\n
${WHITE}Usage: ${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}OPTIONS${NC}${WHITE}

These are the main options/arguments for ${CYAN}${BOLD}update${NC}${WHITE}:

${CYAN}${BOLD}update${YELLOW}${BOLD} apt · -a · --apt [packages]${NC}         ${WHITE}Updates apt packages
${CYAN}${BOLD}update ${YELLOW}${BOLD}all · -A · --all${NC}      		   ${WHITE}Updates apps on all installed package managers and/or app stores that are supported ${NC}- ${LIRED}Note: This option does not update NPM packages because this can cause trouble.
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}pi-apps · -p · --pi-apps${NC}            ${WHITE}Updates Pi-Apps, and apps installed with Pi-Apps
${CYAN}${BOLD}update ${YELLOW}${BOLD}npm · -n · --npm${NC}       		   ${WHITE}Updates all npm packages
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}snaps · -s · --snaps [snaps]${NC}        ${WHITE}Updates snaps with snapd
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}flatpak · -f · --flatpak [packages] ${NC}${WHITE}Updates flatpak apps
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}homebrew · -H · --homebrew${NC}          ${WHITE}Updates Homebrew apps
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}pacman · -c · --pacman [packages]   ${NC}${WHITE}Updates pacman apps
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}dnf · -d · --dnf${NC}       	           ${WHITE}Updates dnf packages
${CYAN}${BOLD}update ${YELLOW}${BOLD}self-update · -u · --self-update${NC}    ${WHITE}Updates the ${CYAN}${BOLD}update ${WHITE}script
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}help · -h · --help${NC}       	   ${WHITE}Displays this help
${CYAN}${BOLD}update${NC} ${YELLOW}${BOLD}version · -v · --version${NC}       	   ${WHITE}Prints version

flags for ${LICYAN}update${WHITE}:

      ${YELLOW}${BOLD}--no-grep-args${NC}                 	   ${WHITE}If this flag is specified, ${LICYAN}update${WHITE} won't remove arguments that are also packages from the update package list, i.e. 'apt'
"
    if [ "$(whoami)" == "root" ]; then
        echo -e "${LIRED}Note: \`${LICYAN}update${LIRED}\` is not meant to be run with \`${WHITE}sudo${LIRED}\`. Although \`${LICYAN}update${LIRED}\` can be run with \`${WHITE}sudo${LIRED}\`, it is not recommended.\n"
    fi
    upd_upd_script on-start
}

# Script

if [ "$(whoami)" == "root" ]; then
    sudo=""
else
    sudo="sudo"
fi

case $1 in
version | -v | --version) ;;
help | -h | --help | \?) ;;
*) upd_upd_script on-start ;;
esac

case $1 in
help | --help | -h) help ;;
all | -A | --all)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_all
    ;;
self-update | -u | --self-update) upd_upd_script ;;
snaps | -s | --snaps)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_snaps
    ;;
homebrew | -H | --homebrew)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_homebrew
    ;;
pi-apps | -p | --pi-apps)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_pi_apps
    ;;
flatpak | -f | --flatpak)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_flatpak
    ;;
npm | -n | --npm)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_npm
    ;;
pacman | -c | --pacman)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_pacman
    ;;
apt | -a | --apt)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_apt
    ;;
dnf | -d | --dnf)
    printf "${CYAN}${BOLD}\nWelcome to Crilum\'s Update Script!\n${NC}"
    upd_dnf
    ;;
version | -v | --version) echo -e "${LICYAN}${version}" ;;
*) error "Either you didn't specify a option/argument, or you didn't specify a valid one!" ;;
esac
